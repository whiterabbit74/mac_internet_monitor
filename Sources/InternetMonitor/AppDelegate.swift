//
//  AppDelegate.swift
//  InternetMonitor
//
//  Created by Internet Monitor App
//  Copyright ¬© 2024. All rights reserved.
//

import AppKit

class AppDelegate: NSObject, NSApplicationDelegate {

    // MARK: - Properties
    private var statusBarController: StatusBarController?
    private var networkMonitor: NetworkMonitor?
    private var preferencesWindowController: PreferencesWindowController?

    // MARK: - Application Lifecycle
    func applicationDidFinishLaunching(_ aNotification: Notification) {
        print("üåê Internet Monitor starting...")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–æ–∫–µ
        setupDockVisibility()

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        setupApplication()

        // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        startMonitoring()

        print("‚úÖ Internet Monitor started successfully!")
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –¥–æ–∫–µ
    private func setupDockVisibility() {
        let showInDock = UserDefaults.standard.bool(forKey: "showInDock")
        if showInDock {
            NSApp.setActivationPolicy(.regular)
        } else {
            NSApp.setActivationPolicy(.accessory)
        }
        print("üóÇÔ∏è Dock visibility: \(showInDock ? "visible" : "hidden")")
    }

    func applicationWillTerminate(_ aNotification: Notification) {
        print("üõë Internet Monitor terminating...")

        // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        cleanup()
    }

    func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -> Bool {
        return false // –ù–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–∫–Ω–∞
    }

    // MARK: - Setup
    private func setupApplication() {
        // –°–æ–∑–¥–∞–µ–º NetworkMonitor
        networkMonitor = NetworkMonitor()

        // –°–æ–∑–¥–∞–µ–º StatusBarController —Å NetworkMonitor
        if let networkMonitor = networkMonitor {
            statusBarController = StatusBarController(networkMonitor: networkMonitor)
        }

        // –°–æ–∑–¥–∞–µ–º PreferencesWindowController
        preferencesWindowController = PreferencesWindowController()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        setupSettingsObserver()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ç–µ–º—ã
        setupThemeObserver()
    }

    // MARK: - Settings Observer
    private func setupSettingsObserver() {
        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(settingsDidChange),
            name: UserDefaults.didChangeNotification,
            object: nil
        )
    }

    private func setupThemeObserver() {
        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ç–µ–º—ã —Å–∏—Å—Ç–µ–º—ã
        DistributedNotificationCenter.default().addObserver(
            self,
            selector: #selector(systemAppearanceDidChange),
            name: NSNotification.Name("AppleInterfaceThemeChangedNotification"),
            object: nil
        )
    }

    @objc private func settingsDidChange() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        let defaults = UserDefaults.standard
        let newOpacity = defaults.float(forKey: "iconOpacity")

        if newOpacity > 0 && abs(CGFloat(newOpacity) - (statusBarController?.iconOpacity ?? 0.5)) > 0.01 {
            print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏–∫–æ–Ω–∫–∏")
            statusBarController?.updateIconOpacity()
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
        let newSize = defaults.float(forKey: "iconSize")
        if newSize > 0 && abs(CGFloat(newSize) - (statusBarController?.iconSize ?? 18.0)) > 0.1 {
            print("üìè –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∫–æ–Ω–∫–∏")
            statusBarController?.updateIconSize()
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        let newEndpoint = defaults.string(forKey: "endpoint")
        let newInterval = defaults.integer(forKey: "checkInterval")

        if newEndpoint != nil || newInterval > 0 {
            print("üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            networkMonitor?.restartMonitoring()
        }
    }

    // MARK: - Theme Support
    @objc private func systemAppearanceDidChange() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã —Å–∏—Å—Ç–µ–º—ã
        DispatchQueue.main.async { [weak self] in
            if let statusBarController = self?.statusBarController {
                print("üé® –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã —Å–∏—Å—Ç–µ–º—ã - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏")
                statusBarController.updateIconsForThemeChange()
            }
        }
    }

    // MARK: - Monitoring
    private func startMonitoring() {
        networkMonitor?.startMonitoring()
    }

    private func stopMonitoring() {
        networkMonitor?.stopMonitoring()
    }

    // MARK: - Cleanup
    private func cleanup() {
        stopMonitoring()
        statusBarController = nil
        networkMonitor = nil
        preferencesWindowController = nil
    }

    // MARK: - Public Methods
    func showPreferences() {
        preferencesWindowController?.showWindow(nil)
        NSApp.activate(ignoringOtherApps: true)
    }

    func refreshStatus() {
        networkMonitor?.refreshStatus()
    }

    deinit {
        // –£–¥–∞–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
        NotificationCenter.default.removeObserver(self, name: UserDefaults.didChangeNotification, object: nil)
        DistributedNotificationCenter.default().removeObserver(self, name: NSNotification.Name("AppleInterfaceThemeChangedNotification"), object: nil)
    }
}
