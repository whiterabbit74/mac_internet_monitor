//
//  NetworkMonitor.swift
//  InternetMonitor
//
//  Created by Internet Monitor App
//  Copyright ¬© 2024. All rights reserved.
//

import Foundation

class NetworkMonitor {

    // MARK: - Types
    enum ConnectionStatus {
        case connected
        case unstable
        case disconnected
    }

    struct NetworkMetrics {
        let latency: Int // milliseconds
        let packetLoss: Int // percentage 0-100
        let timestamp: Date
    }

    // MARK: - Properties
    private var monitoringTimer: Timer?
    private var currentMetrics: NetworkMetrics?
    private var currentStatus: ConnectionStatus = .disconnected

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    private let defaultEndpoint = "apple.com" // Apple endpoint - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
    private let defaultTimeout: TimeInterval = 4.0 // 4 seconds
    private let defaultRetryCount = 1 // –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    private var monitoringInterval: TimeInterval = 3.0 // 3 seconds - –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫

    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    private let unstablePacketLossThreshold = 30 // %
    private let badLatencyThreshold = 500 // ms

    // –ö–æ–ª–ª–±—ç–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    var onStatusChange: ((ConnectionStatus) -> Void)?

    // MARK: - Initialization
    init() {
        setupDefaultSettings()
    }

    deinit {
        stopMonitoring()
    }

    // MARK: - Public Methods
    func startMonitoring() {
        stopMonitoring() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä

        monitoringTimer = Timer.scheduledTimer(withTimeInterval: monitoringInterval,
                                             repeats: true) { [weak self] _ in
            self?.performNetworkCheck()
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
        performNetworkCheck()
    }

    func stopMonitoring() {
        monitoringTimer?.invalidate()
        monitoringTimer = nil
    }

    func refreshStatus() {
        performNetworkCheck()
    }

    func restartMonitoring() {
        print("üîÑ Restarting network monitoring with new settings...")

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        stopMonitoring()

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        startMonitoring()

        // –î–µ–ª–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        performNetworkCheck()
    }

    func getCurrentMetrics() -> NetworkMetrics? {
        return currentMetrics
    }

    func getCurrentStatus() -> ConnectionStatus {
        return currentStatus
    }

    // MARK: - Network Checking
    private func performNetworkCheck() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å
        checkConnectivity { [weak self] result in
            guard let self = self else { return }

            switch result {
            case .success(let metrics):
                self.handleSuccessfulCheck(metrics)
            case .failure(_):
                print("üåê HTTP check failed, trying ping...")
                // –ï—Å–ª–∏ HTTP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º ping
                self.checkWithPing()
            }
        }
    }

    private func checkWithPing() {
        let endpoint = getEndpoint()
        print("üèì Attempting ping fallback to: \(endpoint)")

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π ping
        let process = Process()
        process.executableURL = URL(fileURLWithPath: "/sbin/ping")
        process.arguments = ["-c", "1", "-W", "3000", endpoint] // 3 —Å–µ–∫—É–Ω–¥—ã timeout

        let outputPipe = Pipe()
        let errorPipe = Pipe()
        process.standardOutput = outputPipe
        process.standardError = errorPipe
        process.standardInput = nil

        let startTime = Date()

        do {
            try process.run()
            process.waitUntilExit()

            let endTime = Date()
            let status = process.terminationStatus

            if status == 0 {
                // –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ ping –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π latency
                let outputData = outputPipe.fileHandleForReading.readDataToEndOfFile()
                let outputString = String(data: outputData, encoding: .utf8) ?? ""

                let latency = parsePingLatency(from: outputString) ?? Int(endTime.timeIntervalSince(startTime) * 1000)

                print("‚úÖ Ping successful: \(latency)ms")
                let metrics = NetworkMetrics(latency: latency, packetLoss: 0, timestamp: Date())
                self.handleSuccessfulCheck(metrics)
            } else {
                let errorData = errorPipe.fileHandleForReading.readDataToEndOfFile()
                let errorString = String(data: errorData, encoding: .utf8) ?? "Unknown error"
                print("‚ùå Ping failed: \(errorString)")
                self.handleFailedCheck(NSError(domain: "NetworkMonitor", code: Int(status), userInfo: [NSLocalizedDescriptionKey: "Ping failed: \(errorString)"]))
            }
        } catch {
            print("‚ùå Ping error: \(error.localizedDescription)")
            self.handleFailedCheck(error)
        }

        // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        outputPipe.fileHandleForReading.closeFile()
        errorPipe.fileHandleForReading.closeFile()
    }

    // –ü–∞—Ä—Å–µ—Ä latency –∏–∑ –≤—ã–≤–æ–¥–∞ ping
    private func parsePingLatency(from output: String) -> Int? {
        // –ü—Ä–∏–º–µ—Ä: "64 bytes from 8.8.8.8: icmp_seq=1 ttl=118 time=23.456 ms"
        let pattern = #"time=([0-9.]+)\s*ms"#

        do {
            let regex = try NSRegularExpression(pattern: pattern, options: [])
            let nsString = output as NSString
            let results = regex.matches(in: output, options: [], range: NSRange(location: 0, length: nsString.length))

            if let match = results.first,
               match.numberOfRanges > 1 {
                let timeRange = match.range(at: 1)
                let timeString = nsString.substring(with: timeRange)

                if let timeDouble = Double(timeString) {
                    return Int(timeDouble.rounded())
                }
            }
        } catch {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ping –≤—ã–≤–æ–¥–∞: \(error)")
        }

        return nil
    }

    private func checkConnectivity(completion: @escaping (Result<NetworkMetrics, Error>) -> Void) {
        let endpoint = getEndpoint()
        let url = URL(string: "https://\(endpoint)")!
        print("üåê Checking connectivity to: \(url.absoluteString)")

        var request = URLRequest(url: url)
        request.timeoutInterval = defaultTimeout
        request.httpMethod = "HEAD" // –ò—Å–ø–æ–ª—å–∑—É–µ–º HEAD –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞

        let startTime = Date()

        URLSession.shared.dataTask(with: request) { data, response, error in
            let endTime = Date()
            let latency = Int(endTime.timeIntervalSince(startTime) * 1000)

            if let error = error {
                print("‚ùå Network error: \(error.localizedDescription)")
                // –ü—Ä–æ–±—É–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —Å—á–∏—Ç–∞—Ç—å –Ω–µ—É–¥–∞—á–µ–π
                self.retryCheck(endpoint: endpoint, attempt: 1, completion: completion)
                return
            }

            if let httpResponse = response as? HTTPURLResponse {
                print("üìä HTTP Response: \(httpResponse.statusCode)")
                if (200...299).contains(httpResponse.statusCode) {
                    print("‚úÖ Network check successful: \(latency)ms")
                    let metrics = NetworkMetrics(latency: latency, packetLoss: 0, timestamp: Date())
                    completion(.success(metrics))
                } else {
                    print("‚ùå Invalid response code: \(httpResponse.statusCode)")
                    let error = NSError(domain: "NetworkMonitor",
                                      code: httpResponse.statusCode,
                                      userInfo: [NSLocalizedDescriptionKey: "HTTP \(httpResponse.statusCode)"])
                    completion(.failure(error))
                }
            } else {
                print("‚ùå No HTTP response received")
                let error = NSError(domain: "NetworkMonitor",
                                  code: -1,
                                  userInfo: [NSLocalizedDescriptionKey: "No response"])
                completion(.failure(error))
            }
        }.resume()
    }

    private func retryCheck(endpoint: String, attempt: Int, completion: @escaping (Result<NetworkMetrics, Error>) -> Void) {
        if attempt >= defaultRetryCount {
            // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            let error = NSError(domain: "NetworkMonitor",
                              code: -2,
                              userInfo: [NSLocalizedDescriptionKey: "Connection failed after \(defaultRetryCount) attempts"])
            completion(.failure(error))
            return
        }

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        DispatchQueue.global().asyncAfter(deadline: .now() + 0.5) { [weak self] in
            let url = URL(string: "https://\(endpoint)/status/200")!
            var request = URLRequest(url: url)
            request.timeoutInterval = self?.defaultTimeout ?? 2.0
            request.httpMethod = "HEAD"

            let startTime = Date()

            URLSession.shared.dataTask(with: request) { data, response, error in
                let endTime = Date()
                let latency = Int(endTime.timeIntervalSince(startTime) * 1000)

                if error != nil {
                    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    self?.retryCheck(endpoint: endpoint, attempt: attempt + 1, completion: completion)
                    return
                }

                if let httpResponse = response as? HTTPURLResponse,
                   (200...299).contains(httpResponse.statusCode) {

                    let metrics = NetworkMetrics(latency: latency, packetLoss: 0, timestamp: Date())
                    completion(.success(metrics))
                } else {
                    self?.retryCheck(endpoint: endpoint, attempt: attempt + 1, completion: completion)
                }
            }.resume()
        }
    }

    // MARK: - Status Handling
    private func handleSuccessfulCheck(_ metrics: NetworkMetrics) {
        currentMetrics = metrics

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
        let newStatus = determineStatus(from: metrics)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
        if newStatus != currentStatus {
            currentStatus = newStatus
            notifyStatusChange()
        }
    }

    private func handleFailedCheck(_ error: Error) {
        print("Network check failed: \(error.localizedDescription)")

        // –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å packet loss 100%
        let failedMetrics = NetworkMetrics(latency: -1, packetLoss: 100, timestamp: Date())
        currentMetrics = failedMetrics

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –±—ã–ª disconnected, –º–µ–Ω—è–µ–º –Ω–∞ disconnected
        if currentStatus != .disconnected {
            currentStatus = .disconnected
            notifyStatusChange()
        }
    }

    private func determineStatus(from metrics: NetworkMetrics) -> ConnectionStatus {
        // –ï—Å–ª–∏ packet loss –≤—ã—Å–æ–∫–∏–π –∏–ª–∏ latency —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        if metrics.packetLoss >= unstablePacketLossThreshold || metrics.latency >= badLatencyThreshold {
            return .unstable
        }

        // –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
        return .connected
    }

    private func notifyStatusChange() {
        DispatchQueue.main.async { [weak self] in
            guard let self = self, let onStatusChange = self.onStatusChange else { return }
            onStatusChange(self.currentStatus)
        }
    }

    // MARK: - Settings
    private func setupDefaultSettings() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UserDefaults
        monitoringInterval = getMonitoringInterval()
    }

    private func getEndpoint() -> String {
        let defaults = UserDefaults.standard
        let savedEndpoint = defaults.string(forKey: "endpoint")
        return savedEndpoint ?? defaultEndpoint
    }

    private func getMonitoringInterval() -> TimeInterval {
        let defaults = UserDefaults.standard
        let savedInterval = defaults.integer(forKey: "checkInterval")
        return TimeInterval(savedInterval > 0 ? savedInterval : 5) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥
    }

    // MARK: - Utility Methods
    func getStatusDescription() -> String {
        switch currentStatus {
        case .connected:
            return "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"
        case .unstable:
            return "–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
        case .disconnected:
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
        }
    }
}
