//
//  PreferencesWindowController.swift
//  InternetMonitor
//
//  Created by Internet Monitor App
//  Copyright ¬© 2024. All rights reserved.
//

import AppKit

class PreferencesWindowController: NSWindowController {

    // MARK: - Properties
    private var preferencesViewController: PreferencesViewController?

    // MARK: - Initialization
    init() {
        let window = NSWindow(
            contentRect: NSRect(x: 0, y: 0, width: 400, height: 300),
            styleMask: [.titled, .closable, .miniaturizable],
            backing: .buffered,
            defer: false
        )

        super.init(window: window)

        setupViewController()
        setupWindow()
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: - Setup
    private func setupWindow() {
        guard let window = window else { return }

        window.title = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Internet Monitor v1.0.2"

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        let contentSize = NSSize(width: 520, height: 600)
        window.setContentSize(contentSize)
        window.center()
        window.setFrameAutosaveName("PreferencesWindow")

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
        window.styleMask.insert(.fullSizeContentView)
        window.titlebarAppearsTransparent = true
        window.isMovableByWindowBackground = true
    }

    private func setupViewController() {
        preferencesViewController = PreferencesViewController()
        window?.contentViewController = preferencesViewController
    }

    // MARK: - Public Methods
    override func showWindow(_ sender: Any?) {
        super.showWindow(sender)

        // –ü—Ä–∏–≤–æ–¥–∏–º –æ–∫–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
        window?.makeKeyAndOrderFront(nil)
        NSApp.activate(ignoringOtherApps: true)
    }
}

// MARK: - PreferencesViewController
class PreferencesViewController: NSViewController {

    // MARK: - UI Elements
    private let endpointLabel = NSTextField(labelWithString: "üåê Endpoint:")
    private let endpointPopup = NSPopUpButton(frame: NSRect(x: 0, y: 0, width: 150, height: 24), pullsDown: false)
    private let customEndpointLabel = NSTextField(labelWithString: "üîß –°–≤–æ–π endpoint:")
    private let customEndpointTextField = NSTextField(string: "")

    private let intervalLabel = NSTextField(labelWithString: "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫):")
    private let intervalTextField = NSTextField(string: "5")

    private let notificationsCheckbox = NSButton(checkboxWithTitle: "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", target: nil, action: nil)
    private let tooltipCheckbox = NSButton(checkboxWithTitle: "üí¨ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏", target: nil, action: nil)
    private let autoStartCheckbox = NSButton(checkboxWithTitle: "üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ", target: nil, action: nil)

    private let opacityLabel = NSTextField(labelWithString: "üëÅÔ∏è –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏–∫–æ–Ω–∫–∏:")
    private let opacitySlider = NSSlider(frame: NSRect(x: 0, y: 0, width: 200, height: 24))
    private let opacityValueLabel = NSTextField(labelWithString: "50%")

    private let sizeLabel = NSTextField(labelWithString: "üìè –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏:")
    private let sizeSlider = NSSlider(frame: NSRect(x: 0, y: 0, width: 200, height: 24))
    private let sizeValueLabel = NSTextField(labelWithString: "18px")

    private let saveButton = NSButton(title: "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", target: nil, action: #selector(savePreferences))
    private let cancelButton = NSButton(title: "‚ùå –û—Ç–º–µ–Ω–∞", target: nil, action: #selector(cancelPreferences))

    // MARK: - View Lifecycle
    override func loadView() {
        let view = NSView(frame: NSRect(x: 0, y: 0, width: 520, height: 600))
        self.view = view
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        loadCurrentPreferences()
    }

    // MARK: - Setup
    private func setupUI() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—â–∏–π –≤–∏–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º
        setupViewAppearance()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        setupTextFields()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º popup button
        setupEndpointPopup()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
        setupCheckboxes()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        setupOpacitySlider()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏–∫–æ–Ω–∫–∏
        setupSizeSlider()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        setupButtons()

        // –°–æ–∑–¥–∞–µ–º layout
        createLayout()
    }

    private func setupViewAppearance() {
        // –§–æ–Ω –æ–∫–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
        view.wantsLayer = true
        view.layer?.backgroundColor = NSColor.windowBackgroundColor.cgColor

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ç–∏–ª—è—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        _ = NSColor.separatorColor

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ç–µ–º—ã
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(systemAppearanceChanged),
            name: NSNotification.Name(rawValue: "AppleInterfaceThemeChangedNotification"),
            object: nil
        )
    }

    private func setupTextFields() {
        customEndpointTextField.placeholderString = "–ù–∞–ø—Ä–∏–º–µ—Ä: google.com"
        intervalTextField.placeholderString = "5"

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞–º–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        intervalTextField.formatter = formatter

        // –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º
        [customEndpointTextField, intervalTextField].forEach { field in
            field.wantsLayer = true
            field.layer?.cornerRadius = 6
            field.layer?.borderWidth = 1
            field.layer?.borderColor = NSColor.separatorColor.cgColor
            field.backgroundColor = NSColor.controlBackgroundColor
            field.textColor = NSColor.labelColor
            field.font = NSFont.systemFont(ofSize: 13)
            field.focusRingType = .exterior
        }
    }

    private func setupEndpointPopup() {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ endpoints
        endpointPopup.addItem(withTitle: "8.8.8.8 (Google DNS)")
        endpointPopup.addItem(withTitle: "apple.com (Apple)")
        endpointPopup.addItem(withTitle: "1.1.1.1 (Cloudflare)")
        endpointPopup.addItem(withTitle: "yandex.ru (Yandex)")
        endpointPopup.addItem(withTitle: "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç...")

        // –°—Ç–∏–ª—å –¥–ª—è popup button —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º
        endpointPopup.wantsLayer = true
        endpointPopup.layer?.cornerRadius = 6
        endpointPopup.layer?.borderWidth = 1
        endpointPopup.layer?.borderColor = NSColor.separatorColor.cgColor
        endpointPopup.font = NSFont.systemFont(ofSize: 13)
        endpointPopup.bezelStyle = .rounded

        endpointPopup.target = self
        endpointPopup.action = #selector(endpointPopupChanged)
    }

    private func setupOpacitySlider() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä (0.0 - 1.0)
        opacitySlider.minValue = 0.1  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å 10%
        opacitySlider.maxValue = 1.0  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å 100%
        opacitySlider.floatValue = 0.5  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50%

        // –°—Ç–∏–ª—å —Å–ª–∞–π–¥–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º
        opacitySlider.wantsLayer = true
        opacitySlider.layer?.cornerRadius = 3

        opacitySlider.target = self
        opacitySlider.action = #selector(opacitySliderChanged)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–µ–π–±–ª –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º
        opacityValueLabel.alignment = .center
        opacityValueLabel.font = NSFont.systemFont(ofSize: 11)
        opacityValueLabel.textColor = NSColor.secondaryLabelColor
    }

    private func setupSizeSlider() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä (12.0 - 24.0 px)
        sizeSlider.minValue = 12.0  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 12px
        sizeSlider.maxValue = 24.0  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 24px
        sizeSlider.floatValue = 18.0  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 18px

        // –°—Ç–∏–ª—å —Å–ª–∞–π–¥–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º
        sizeSlider.wantsLayer = true
        sizeSlider.layer?.cornerRadius = 3

        sizeSlider.target = self
        sizeSlider.action = #selector(sizeSliderChanged)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–µ–π–±–ª –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º
        sizeValueLabel.alignment = .center
        sizeValueLabel.font = NSFont.systemFont(ofSize: 11)
        sizeValueLabel.textColor = NSColor.secondaryLabelColor
    }

    private func setupCheckboxes() {
        // –°—Ç–∏–ª—å —á–µ–∫–±–æ–∫—Å–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º
        [notificationsCheckbox, tooltipCheckbox, autoStartCheckbox].forEach { checkbox in
            checkbox.font = NSFont.systemFont(ofSize: 13)
            checkbox.setButtonType(.switch)
        }

        notificationsCheckbox.state = .on
        tooltipCheckbox.state = .on
    }

    private func setupButtons() {
        saveButton.target = self
        cancelButton.target = self

        // –°—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º
        saveButton.bezelStyle = .rounded
        cancelButton.bezelStyle = .rounded

        saveButton.font = NSFont.systemFont(ofSize: 13, weight: .medium)
        cancelButton.font = NSFont.systemFont(ofSize: 13, weight: .regular)

        // –¶–≤–µ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        saveButton.keyEquivalent = "\r"  // Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        saveButton.keyEquivalentModifierMask = []

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
        [saveButton, cancelButton].forEach { button in
            button.wantsLayer = true
            button.layer?.cornerRadius = 8
            button.layer?.masksToBounds = false
        }
    }

    // MARK: - Theme Support
    @objc private func systemAppearanceChanged() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω –æ–∫–Ω–∞
            self.view.layer?.backgroundColor = NSColor.windowBackgroundColor.cgColor

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
            [self.customEndpointTextField, self.intervalTextField].forEach { field in
                field.layer?.borderColor = NSColor.separatorColor.cgColor
                field.backgroundColor = NSColor.controlBackgroundColor
                field.textColor = NSColor.labelColor
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è popup button
            self.endpointPopup.layer?.borderColor = NSColor.separatorColor.cgColor

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            self.opacitySlider.layer?.backgroundColor = NSColor.controlBackgroundColor.cgColor

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∫–æ–Ω–∫–∏
            self.sizeSlider.layer?.backgroundColor = NSColor.controlBackgroundColor.cgColor

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ª–µ–π–±–ª–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π
            self.opacityValueLabel.textColor = NSColor.secondaryLabelColor
            self.sizeValueLabel.textColor = NSColor.secondaryLabelColor

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º view
            self.view.needsDisplay = true
        }
    }

    deinit {
        // –£–¥–∞–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
        NotificationCenter.default.removeObserver(self, name: NSNotification.Name(rawValue: "AppleInterfaceThemeChangedNotification"), object: nil)
    }

    private func createLayout() {
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ view
        view.addSubview(endpointLabel)
        view.addSubview(endpointPopup)
        view.addSubview(customEndpointLabel)
        view.addSubview(customEndpointTextField)
        view.addSubview(intervalLabel)
        view.addSubview(intervalTextField)
        view.addSubview(notificationsCheckbox)
        view.addSubview(tooltipCheckbox)
        view.addSubview(autoStartCheckbox)
        view.addSubview(opacityLabel)
        view.addSubview(opacitySlider)
        view.addSubview(opacityValueLabel)
        view.addSubview(sizeLabel)
        view.addSubview(sizeSlider)
        view.addSubview(sizeValueLabel)
        view.addSubview(saveButton)
        view.addSubview(cancelButton)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º layout
        setupConstraints()
    }

    private func setupConstraints() {
        let margin: CGFloat = 30
        let sectionSpacing: CGFloat = 25
        let fieldHeight: CGFloat = 24

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º translatesAutoresizingMaskIntoConstraints = false –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        [endpointLabel, endpointPopup, customEndpointLabel, customEndpointTextField,
         intervalLabel, intervalTextField, notificationsCheckbox, tooltipCheckbox,
         autoStartCheckbox, opacityLabel, opacitySlider, opacityValueLabel,
         sizeLabel, sizeSlider, sizeValueLabel,
         saveButton, cancelButton].forEach {
            $0.translatesAutoresizingMaskIntoConstraints = false
        }

        // Endpoint selection
        NSLayoutConstraint.activate([
            endpointLabel.topAnchor.constraint(equalTo: view.topAnchor, constant: margin + 10), // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø
            endpointLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: margin),

            endpointPopup.topAnchor.constraint(equalTo: endpointLabel.topAnchor),
            endpointPopup.leadingAnchor.constraint(equalTo: endpointLabel.trailingAnchor, constant: 12),
            endpointPopup.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -margin),
            endpointPopup.heightAnchor.constraint(equalToConstant: fieldHeight)
        ])

        // Custom endpoint
        NSLayoutConstraint.activate([
            customEndpointLabel.topAnchor.constraint(equalTo: endpointPopup.bottomAnchor, constant: sectionSpacing),
            customEndpointLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: margin),

            customEndpointTextField.topAnchor.constraint(equalTo: customEndpointLabel.topAnchor),
            customEndpointTextField.leadingAnchor.constraint(equalTo: customEndpointLabel.trailingAnchor, constant: 12),
            customEndpointTextField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -margin),
            customEndpointTextField.heightAnchor.constraint(equalToConstant: fieldHeight)
        ])

        // Interval
        NSLayoutConstraint.activate([
            intervalLabel.topAnchor.constraint(equalTo: customEndpointTextField.bottomAnchor, constant: sectionSpacing),
            intervalLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: margin),

            intervalTextField.topAnchor.constraint(equalTo: intervalLabel.topAnchor),
            intervalTextField.leadingAnchor.constraint(equalTo: intervalLabel.trailingAnchor, constant: 12),
            intervalTextField.widthAnchor.constraint(equalToConstant: 70),
            intervalTextField.heightAnchor.constraint(equalToConstant: fieldHeight)
        ])

        // Checkboxes
        NSLayoutConstraint.activate([
            notificationsCheckbox.topAnchor.constraint(equalTo: intervalTextField.bottomAnchor, constant: sectionSpacing + 5),
            notificationsCheckbox.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: margin),

            tooltipCheckbox.topAnchor.constraint(equalTo: notificationsCheckbox.bottomAnchor, constant: 15),
            tooltipCheckbox.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: margin),

            autoStartCheckbox.topAnchor.constraint(equalTo: tooltipCheckbox.bottomAnchor, constant: 15),
            autoStartCheckbox.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: margin)
        ])

        // Opacity slider
        NSLayoutConstraint.activate([
            opacityLabel.topAnchor.constraint(equalTo: autoStartCheckbox.bottomAnchor, constant: sectionSpacing + 5),
            opacityLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: margin),

            opacitySlider.topAnchor.constraint(equalTo: opacityLabel.bottomAnchor, constant: 10),
            opacitySlider.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: margin),
            opacitySlider.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -margin),
            opacitySlider.heightAnchor.constraint(equalToConstant: fieldHeight),

            opacityValueLabel.topAnchor.constraint(equalTo: opacitySlider.bottomAnchor, constant: 6),
            opacityValueLabel.centerXAnchor.constraint(equalTo: opacitySlider.centerXAnchor),
            opacityValueLabel.widthAnchor.constraint(equalToConstant: 45)
        ])

        // Size slider
        NSLayoutConstraint.activate([
            sizeLabel.topAnchor.constraint(equalTo: opacityValueLabel.bottomAnchor, constant: 15),
            sizeLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: margin),

            sizeSlider.topAnchor.constraint(equalTo: sizeLabel.bottomAnchor, constant: 10),
            sizeSlider.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: margin),
            sizeSlider.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -margin),
            sizeSlider.heightAnchor.constraint(equalToConstant: fieldHeight),

            sizeValueLabel.topAnchor.constraint(equalTo: sizeSlider.bottomAnchor, constant: 6),
            sizeValueLabel.centerXAnchor.constraint(equalTo: sizeSlider.centerXAnchor),
            sizeValueLabel.widthAnchor.constraint(equalToConstant: 50)
        ])

        // Buttons
        NSLayoutConstraint.activate([
            saveButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -margin - 5), // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø
            saveButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -margin),

            cancelButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -margin - 5),
            cancelButton.trailingAnchor.constraint(equalTo: saveButton.leadingAnchor, constant: -12)
        ])
    }

    // MARK: - Actions
    @objc private func endpointPopupChanged() {
        let selectedIndex = endpointPopup.indexOfSelectedItem
        if selectedIndex == 4 { // "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç..."
            customEndpointTextField.isEnabled = true
            customEndpointTextField.becomeFirstResponder()
        } else {
            customEndpointTextField.isEnabled = false
            customEndpointTextField.stringValue = ""
        }
    }

    @objc private func opacitySliderChanged() {
        let opacityValue = opacitySlider.floatValue
        let percentage = Int(opacityValue * 100)
        opacityValueLabel.stringValue = "\(percentage)%"
    }

    @objc private func sizeSliderChanged() {
        let sizeValue = sizeSlider.floatValue
        let sizeInt = Int(sizeValue)
        sizeValueLabel.stringValue = "\(sizeInt)px"
    }

    // MARK: - Preferences Management
    private func loadCurrentPreferences() {
        let defaults = UserDefaults.standard

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π endpoint
        let selectedEndpointIndex = defaults.integer(forKey: "selectedEndpointIndex")
        endpointPopup.selectItem(at: selectedEndpointIndex)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π endpoint
        customEndpointTextField.stringValue = defaults.string(forKey: "customEndpoint") ?? ""
        customEndpointTextField.isEnabled = (selectedEndpointIndex == 4)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        intervalTextField.stringValue = String(defaults.integer(forKey: "checkInterval") != 0 ? defaults.integer(forKey: "checkInterval") : 5)
        notificationsCheckbox.state = defaults.bool(forKey: "notificationsEnabled") ? .on : .off
        tooltipCheckbox.state = defaults.bool(forKey: "tooltipsEnabled") ? .on : .off
        autoStartCheckbox.state = defaults.bool(forKey: "autoStartEnabled") ? .on : .off

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        let iconOpacity = defaults.float(forKey: "iconOpacity")
        opacitySlider.floatValue = iconOpacity > 0 ? iconOpacity : 0.5  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50%
        opacitySliderChanged()  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞–∑–º–µ—Ä–∞ –∏–∫–æ–Ω–∫–∏
        let iconSize = defaults.float(forKey: "iconSize")
        sizeSlider.floatValue = iconSize > 0 ? iconSize : 18.0  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 18px
        sizeSliderChanged()  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª
    }

    @objc private func savePreferences() {
        let defaults = UserDefaults.standard

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π endpoint
        let selectedIndex = endpointPopup.indexOfSelectedItem
        defaults.set(selectedIndex, forKey: "selectedEndpointIndex")

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞
        var endpointToSave = "apple.com" // default
        if selectedIndex == 0 {
            endpointToSave = "8.8.8.8"
        } else if selectedIndex == 1 {
            endpointToSave = "apple.com"
        } else if selectedIndex == 2 {
            endpointToSave = "1.1.1.1"
        } else if selectedIndex == 3 {
            endpointToSave = "yandex.ru"
        } else if selectedIndex == 4 && !customEndpointTextField.stringValue.isEmpty {
            endpointToSave = customEndpointTextField.stringValue
        }

        defaults.set(endpointToSave, forKey: "endpoint")
        defaults.set(customEndpointTextField.stringValue, forKey: "customEndpoint")
        defaults.set(Int(intervalTextField.stringValue) ?? 5, forKey: "checkInterval")
        defaults.set(notificationsCheckbox.state == .on, forKey: "notificationsEnabled")
        defaults.set(tooltipCheckbox.state == .on, forKey: "tooltipsEnabled")
        defaults.set(autoStartCheckbox.state == .on, forKey: "autoStartEnabled")
        defaults.set(opacitySlider.floatValue, forKey: "iconOpacity")
        defaults.set(sizeSlider.floatValue, forKey: "iconSize")

        defaults.synchronize()

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        handleAutoStart(autoStartCheckbox.state == .on)

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ (–≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
        view.window?.close()
    }

    @objc private func cancelPreferences() {
        view.window?.close()
    }

    // MARK: - Auto Start Management
    private func handleAutoStart(_ enable: Bool) {
        if enable {
            enableAutoStart()
        } else {
            disableAutoStart()
        }
    }

    private func enableAutoStart() {
        let appPath = Bundle.main.bundlePath
        let script = """
        tell application "System Events"
            make new login item with properties {path:"\(appPath)", hidden:false}
        end tell
        """

        let process = Process()
        process.executableURL = URL(fileURLWithPath: "/usr/bin/osascript")
        process.arguments = ["-e", script]

        do {
            try process.run()
            print("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: \(error.localizedDescription)")
        }
    }

    private func disableAutoStart() {
        let appName = Bundle.main.bundleURL.deletingPathExtension().lastPathComponent
        let script = """
        tell application "System Events"
            delete (every login item whose name is "\(appName)")
        end tell
        """

        let process = Process()
        process.executableURL = URL(fileURLWithPath: "/usr/bin/osascript")
        process.arguments = ["-e", script]

        do {
            try process.run()
            print("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: \(error.localizedDescription)")
        }
    }


}
